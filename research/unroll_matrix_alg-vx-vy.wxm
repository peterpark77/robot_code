/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: comment start ]
Unrolled Matrix Algebra for VirtualME - NMPC algorithm
Controlled turn-rate

Timothy A.V. Teatro

   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Definitions
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
These are basic definitions for the control system and algoritm.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
q(k) := matrix([x[k]], [y[k]]);
pr(k) := matrix([p1[k]],[p2[k]]);
u(k) := matrix( [Dx[k]], [Dy[k]] );
delta(k) := matrix([ex[k]], [ey[k]]);
R : matrix([R1, 0], [0, R2]);
Q0 : matrix([Q01, 0],[0, Q02]);
Q : matrix([Q1, 0],[0, Q2]);
S : ident(2)*0;
a(k) := matrix([q(k)[1] + u(k)[1]*T],
               [q(k)[2] + u(k)[2]*T]);
dadq(k) := matrix( [1, 0],
                   [0, 1]);
dadu(k) := matrix([T, 0], [0, T]);
dPhidq(k) := matrix([PhiX[k], PhiY[k]]);
ddeltadq  :  matrix([1, 0], [0, 1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Cost Function
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
J : transpose(delta(N-1)) . Q0 . delta(N-1)
   + sum( transpose(delta(N-1)) . Q0 . delta(N-1)
        + transpose(delta(N-1)) . Q0 . delta(N-1)
        + Phi[k]
+ transpose(pr(k+1)) . (a(k) - q(k+1)), k, 0, N-1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Lagrange Multipliers and Gradient
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
For the Nth element
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Starting from zero, the last element of the horizon is N-1.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
transpose(transpose(delta(N-1)) . Q0 . ddeltadq);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
transpose( transpose(u(N-2)) . R+transpose(pr(N-1)) . dadu(k) );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
For the kth element
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
p(k) := transpose(transpose(delta(k)) . Q . ddeltadq 
           + transpose(pr(k+1)) . dadq(k)
           - dPhidq(k))$
p(k);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
dHdu(k) := transpose(u(k)) . R + transpose(pr(k+1)) . dadu(k)$
transpose(dHdu(k));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
An interesting thought: Expanding the Lagrange multipliers in the above
definition may reveal a more direct way to compute the gradient elements,
but now p_k+2 elements are explicit.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
dHdu(k) := transpose(u(k)) . R + transpose(p(k+1)) . dadu(k);
ratsimp(transpose(dHdu(k)));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
